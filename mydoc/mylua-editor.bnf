(*
在lua的基础上做了一些修改
- 分离 table 成 array 和 map。
    - 新增 `[]` `[1,2]` 语法初始化 array。
    - 修改了表格的一些接口实现，比如 `#` 运算符。
- 增加了一点语法糖。
    - dollar_func
    - dollar_string
    - ? and ??
    - continue
- 还有一些其他改变
    1. 关键字可以用于一些无语法歧义的地方，比如 t.key = 1 的 key
    2. 函数参数可以加一个后缀 ','。
*)

chunk ::= block

block ::= {stat} [retstat]

stat ::=  ';' |
        varlist '=' explist |
        functioncall |
        label |
        'break' | 'continue' |
        'goto' Name |
        'do' block 'end' |
        'while' exp 'do' block 'end' |
        'repeat' block 'until' exp |
        'if' exp 'then' block {'elseif' exp 'then' block} ['else' block] 'end' |
        'for' Name '=' exp ',' exp [',' exp] 'do' block 'end' |
        'for' namelist 'in' explist 'do' block 'end' |
        'function' funcname funcbody |
        'local' 'function' Name funcbody |
        'local' attnamelist ['=' explist] |

attnamelist ::=  Name attrib {',' Name attrib}

attrib ::= ['<' Name '>']

retstat ::= 'return' [explist] [';']

label ::= '::' Name '::'

funcname ::= Name {'.' Name} [':' Name]

varlist ::= table_index {',' table_index}

(* 增加 ? 中断语法。只能用于读取，写入时会报错 *)
table_index ::=  Name | prefixexp ['?'] ( '[' exp ']' | '.' Name )

functioncall ::=  prefixexp ['?'] [':' Name ['?']] args

prefixexp ::= table_index | functioncall | '(' exp ')'

namelist ::= Name {',' Name}

explist ::= exp {',' exp}

# 基础表达式
exp_base ::= 'nil' | 'false' | 'true' | Numeral | LiteralString | '...' | functiondef
            | dollar_string | dollar_func | tableconstructor | array_constructor

# 主要表达式，不包含运算符
exp_main ::= exp_base | prefixexp

# 表达式
exp ::= exp_main | exp binop exp | unop exp 

args ::=  '(' [args_list] ')' | tableconstructor | LiteralString | dollar_string | dollar_func

args_list ::= { expr ',' } { Name '=' expr ','} { expr ',' } [ Trim ',' ]

functiondef ::= function funcbody

funcbody ::= '(' [parlist] ')' block 'end'

# 允许结尾多一个 ','
parlist ::= namelist [','] | namelist ',' '...' | '...'

# '$' 语法糖
dollar_func ::= '$' [ '(' [parlist] ')' ] '{' block '}'
dollar_string ::= '$'DollarString

# add syntax [1,2,3]
array_constructor ::= '[' exp { fieldsep exp } [ fieldsep ]']'

tableconstructor ::= '{' [fieldlist] '}'

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= '[' exp ']' '=' exp | Name '=' exp | exp

fieldsep ::= ',' | ';'

binop ::=  '+' | '-' | '*' | '/' | '//' | '^' | '%' | 
        '&' | '~' | '|' | '>>' | '<<' | '..' | 
        '<' | '<=' | '>' | '>=' | '==' | '~=' | '??' |
        and | or

unop ::= '-' | not | '#' | '~'